basePath: /api/v1
definitions:
  models.Appointment:
    properties:
      date:
        type: string
      doctor_id:
        type: integer
      first_name:
        type: string
      id:
        type: integer
      iin:
        type: string
      last_name:
        type: string
      patient_id:
        type: integer
      specialization:
        type: string
    type: object
  models.AppointmentRequest:
    properties:
      date:
        example: "2024-03-14T12:00:00Z"
        type: string
      iin:
        example: "123456789012"
        type: string
    type: object
  models.ChangePasswordRequest:
    properties:
      iin:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      verify_password:
        type: string
    type: object
  models.Doctor:
    properties:
      doctor_id:
        type: integer
      specialization:
        type: string
      user_id:
        type: integer
    type: object
  models.DoctorDetails:
    properties:
      doctor_id:
        type: string
      specialization:
        type: string
      user_id:
        type: integer
    type: object
  models.ForgotPasswordRequest:
    properties:
      iin:
        type: string
    type: object
  models.LoginRequest:
    properties:
      iin:
        type: string
      password:
        type: string
    type: object
  models.Patient:
    properties:
      date_of_birth:
        type: string
      patient_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.PatientDetails:
    properties:
      date_of_birth:
        type: string
      patient_id:
        type: string
      user_id:
        type: integer
    type: object
  models.Record:
    properties:
      created_at:
        type: string
      diagnosis:
        type: string
      doctor_id:
        type: integer
      iin:
        type: string
      patient_id:
        type: integer
      record_id:
        type: integer
      test_result:
        type: string
      treatment_plan:
        type: string
    type: object
  models.RecordRequest:
    properties:
      diagnosis:
        example: Common cold
        type: string
      iin:
        example: "123456789012"
        type: string
      test_result:
        example: Blood test results
        type: string
      treatment_plan:
        example: Rest and medication
        type: string
    type: object
  models.RecordWithDetails:
    properties:
      created_at:
        type: string
      diagnosis:
        type: string
      doctor_full_name:
        type: string
      doctor_id:
        type: integer
      doctor_specialization:
        type: string
      iin:
        type: string
      patient_full_name:
        type: string
      patient_id:
        type: integer
      patient_iin:
        type: string
      record_id:
        type: integer
      test_result:
        type: string
      treatment_plan:
        type: string
    type: object
  models.User:
    properties:
      biometric_data_hash:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      iin:
        type: string
      last_name:
        type: string
      password:
        type: string
      password_changed:
        type: boolean
      phone_number:
        type: string
      role:
        type: string
      user_id:
        type: integer
    type: object
  models.UserInfoResponse:
    properties:
      doctor_details:
        allOf:
        - $ref: '#/definitions/models.Doctor'
        description: Doctor-specific details if user is a doctor
      patient_details:
        allOf:
        - $ref: '#/definitions/models.Patient'
        description: Patient-specific details if user is a patient
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Basic user information
    type: object
  models.UserRequest:
    properties:
      doctor_details:
        $ref: '#/definitions/models.DoctorDetails'
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      iin:
        type: string
      last_name:
        type: string
      password:
        type: string
      patient_details:
        $ref: '#/definitions/models.PatientDetails'
      phone_number:
        type: string
      role:
        type: string
      user_id:
        type: integer
    type: object
  models.VerifyOTPRequest:
    properties:
      iin:
        example: "123456789012"
        type: string
      otp:
        example: "123456"
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a REST API for managing medical organization app.
  title: DiplomaAPI
  version: "1.0"
paths:
  /appointments:
    get:
      description: Fetch appointments for the authenticated doctor or patient
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointment'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get appointments
      tags:
      - appointments
    post:
      consumes:
      - application/json
      description: Create a new appointment
      parameters:
      - description: Appointment
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AppointmentRequest'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Appointment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new appointment
      tags:
      - appointments
  /appointments/{id}:
    delete:
      description: Delete an appointment if it is before the scheduled date
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete an appointment
      tags:
      - appointments
  /approve:
    post:
      consumes:
      - multipart/form-data
      description: Compares uploaded photo with stored one
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: New face photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Approve secure action by verifying face
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: Login request object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginRequest'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authentication
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User request object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRequest'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - auth
  /auth/upload-photo:
    post:
      consumes:
      - multipart/form-data
      description: Upload and verify user's photo
      parameters:
      - description: User ID
        in: formData
        name: user_id
        required: true
        type: integer
      - description: User Photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload user photo for face verification
      tags:
      - auth
  /patients:
    get:
      description: Fetch a list of all patients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Patient'
            type: array
      summary: Get all patients
      tags:
      - patients
  /patients/{id}:
    get:
      description: Fetch a patient by its ID
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Patient'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a patient by ID
      tags:
      - patients
  /records:
    get:
      description: Fetch a record by its UserID
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecordWithDetails'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a record by UserID through claim
      tags:
      - medical records
    post:
      consumes:
      - application/json
      description: Create a new record
      parameters:
      - description: Record
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RecordRequest'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new record
      tags:
      - medical records
  /records/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing medical record with the provided details
      parameters:
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Record object
        in: body
        name: record
        required: true
        schema:
          $ref: '#/definitions/models.RecordRequest'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Record'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a record
      tags:
      - medical records
  /records/{iin}:
    get:
      description: Fetch a record by its IIN
      parameters:
      - description: IIN
        in: path
        name: iin
        required: true
        type: string
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecordWithDetails'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a record by IIN
      tags:
      - medical records
  /register:
    post:
      consumes:
      - multipart/form-data
      description: Uploads photo and saves if it contains one face
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Face photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register user with photo
      tags:
      - auth
  /users:
    get:
      description: Fetch a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
      tags:
      - users
    get:
      description: Fetch a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - users
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Change user's password
      parameters:
      - description: Change Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Change password
      tags:
      - users
  /users/forgot-password:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email for password reset
      parameters:
      - description: Forgot Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - users
  /users/info/{iin}:
    get:
      description: Get user information including role-specific details (doctor or
        patient)
      parameters:
      - description: User IIN
        in: path
        name: iin
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserInfoResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get detailed user information by IIN
      tags:
      - users
  /users/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP and set password_changed flag to false
      parameters:
      - description: Verify OTP Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify OTP
      tags:
      - users
swagger: "2.0"
